{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fnil\fcharset0 Menlo-Italic;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red109\green111\blue5;\red15\green112\blue3;
\red25\green68\blue35;\red0\green0\blue254;\red0\green0\blue109;\red14\green110\blue109;\red82\green0\blue103;
\red41\green15\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c42745\c43529\c1961;\csgenericrgb\c5882\c43922\c1176;
\csgenericrgb\c9804\c26667\c13725;\csgenericrgb\c0\c0\c99608;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c5490\c43137\c42745;\csgenericrgb\c32157\c0\c40392;
\csgenericrgb\c16078\c5882\c42745;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\i\fs24 \cf2 /*\uc0\u8232  * Summary:\u8232  *  this application works as a registration system for Birzeit Universiry Computer Science department. it takes two files one for the courses\u8232  *  that the department is offering and the other for the students and what they want to register. and it returns a report file that includes\u8232  *  registration info the head of the department requiers.\u8232  * */\u8232 \u8232 
\f1\i0 \cf3 #include
\f2\b \cf4  <stdio.h>\uc0\u8232 
\f1\b0 \cf3 #include
\f2\b \cf4  <stdlib.h>\uc0\u8232 
\f1\b0 \cf3 #include
\f2\b \cf4  <string.h>\uc0\u8232 
\f1\b0 \cf3 #include
\f2\b \cf4  <stdbool.h>\uc0\u8232 \u8232 
\f1\b0 \cf3 #define 
\f2\b \cf5 STUDENTNAMELENGTH 
\f1\b0 \cf6 20\uc0\u8232 \cf3 #define 
\f2\b \cf5 COURSENAMELENGTH 
\f1\b0 \cf6 50\uc0\u8232 \cf3 #define 
\f2\b \cf5 SCANNEDSTRINGMAXLENGTH 
\f1\b0 \cf6 200\uc0\u8232 \cf3 #define 
\f2\b \cf5 IDSIZE 
\f1\b0 \cf6 10\uc0\u8232 \cf3 #define 
\f2\b \cf5 CLOCKARRAYSIZE 
\f1\b0 \cf6 9\uc0\u8232 \u8232 
\f2\b \cf7 struct 
\f1\b0 \cf8 student\cf0 \{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf9 id\cf0 ;\uc0\u8232     
\f2\b \cf7 char 
\f1\b0 \cf9 name\cf0 [
\f2\b \cf5 STUDENTNAMELENGTH
\f1\b0 \cf0 ];\uc0\u8232     
\f2\b \cf7 struct 
\f1\b0 \cf8 student\cf0 * \cf9 next\cf0 ;\uc0\u8232 \};\u8232 \u8232 
\f2\b \cf7 typedef struct 
\f1\b0 \cf8 student \cf10 student_t\cf0 ;\uc0\u8232 
\f2\b \cf7 typedef 
\f1\b0 \cf10 student_t \cf0 *\cf10 p2s\cf0 ;\uc0\u8232 
\f2\b \cf7 typedef 
\f1\b0 \cf10 p2s List\cf0 ;\uc0\u8232 
\f2\b \cf7 typedef 
\f1\b0 \cf10 p2s Position\cf0 ;\uc0\u8232 \u8232 
\f2\b \cf7 typedef struct
\f1\b0 \cf0 \{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf9 id\cf0 ;\uc0\u8232     
\f2\b \cf7 char 
\f1\b0 \cf9 name\cf0 [
\f2\b \cf5 STUDENTNAMELENGTH
\f1\b0 \cf0 ];\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf9 coursesIndexes\cf0 [\cf6 5\cf0 ];\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf9 numberOfCoursesRegistered\cf0 ;\uc0\u8232 \}\cf10 miniStudent\cf0 ;\uc0\u8232 \u8232 
\f2\b \cf7 struct 
\f1\b0 \cf8 course\cf0 \{\uc0\u8232     
\f2\b \cf7 char 
\f1\b0 \cf9 name\cf0 [
\f2\b \cf5 COURSENAMELENGTH
\f1\b0 \cf0 ], \cf9 id\cf0 [
\f2\b \cf5 IDSIZE
\f1\b0 \cf0 ];\uc0\u8232     
\f2\b \cf7 short 
\f1\b0 \cf9 maxStudents\cf0 , \cf9 year\cf0 ;\uc0\u8232     
\f2\b \cf7 double 
\f1\b0 \cf9 startTime\cf0 , \cf9 finishTime\cf0 ;\uc0\u8232     \cf10 List \cf9 students\cf0 ;\uc0\u8232 \};\u8232 \u8232 
\f2\b \cf7 typedef struct 
\f1\b0 \cf8 course \cf10 course_t\cf0 ;\uc0\u8232 \u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 fileLineCount(\cf10 FILE\cf0 *);\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 getFromFile(\cf10 FILE\cf0 *, 
\f2\b \cf7 char
\f1\b0 \cf0 [][
\f2\b \cf5 SCANNEDSTRINGMAXLENGTH
\f1\b0 \cf0 ]);\uc0\u8232 
\f0\i \cf2 //void printStringArray(char[][100], int); //for testing and evaluation while developing\uc0\u8232 
\f2\i0\b \cf7 void 
\f1\b0 \cf0 printCourses(\cf10 course_t\cf0 [], 
\f2\b \cf7 int
\f1\b0 \cf0 ); 
\f0\i \cf2 //for testing\uc0\u8232 
\f2\i0\b \cf7 void 
\f1\b0 \cf0 makeDot(
\f2\b \cf7 char
\f1\b0 \cf0 []);\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 fillCourseArrayFromFile(\cf10 course_t\cf0 [], \cf10 FILE\cf0 *, 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 removeSpace(
\f2\b \cf7 char
\f1\b0 \cf0 []);\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 removeNewLine(
\f2\b \cf7 char
\f1\b0 \cf0 []);\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isCourseOffered(
\f2\b \cf7 char
\f1\b0 \cf0 [], \cf10 course_t\cf0 [], 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 findAddressOfCourse(
\f2\b \cf7 char
\f1\b0 \cf0 [], \cf10 course_t\cf0 [], 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isAllowedToRegister(
\f2\b \cf7 int
\f1\b0 \cf0 , 
\f2\b \cf7 int
\f1\b0 \cf0 , \cf10 course_t\cf0 []);\uc0\u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 studentsInCourse(\cf10 List\cf0 );\uc0\u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 maxStudentsInCourse(
\f2\b \cf7 int
\f1\b0 \cf0 , \cf10 course_t\cf0 []);\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 initiateClockArray(
\f2\b \cf5 bool
\f1\b0 \cf0 []);\uc0\u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 getAddressForClock(
\f2\b \cf7 double
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 fillClockArray(
\f2\b \cf5 bool
\f1\b0 \cf0 [], 
\f2\b \cf7 double
\f1\b0 \cf0 , 
\f2\b \cf7 double
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isNotConflict(
\f2\b \cf5 bool
\f1\b0 \cf0 [], 
\f2\b \cf7 int
\f1\b0 \cf0 , \cf10 course_t\cf0 []);\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 fillStudentsLinkedListFromFile(\cf10 course_t\cf0 [], \cf10 FILE\cf0 *,
\f2\b \cf7 int
\f1\b0 \cf0 , 
\f2\b \cf7 int
\f1\b0 \cf0 , \cf10 miniStudent\cf0 []);\uc0\u8232 \cf10 List \cf0 NewHead();\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isEmpty(\cf10 List \cf0 L);\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isLast(\cf10 Position\cf0 );\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 deleteList(\cf10 List\cf0 );\uc0\u8232 \cf10 Position \cf0 newNode(
\f2\b \cf7 char
\f1\b0 \cf0 [], 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 insertFirst(\cf10 List\cf0 , 
\f2\b \cf7 char
\f1\b0 \cf0 [], 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 insertLast(\cf10 List\cf0 , 
\f2\b \cf7 char
\f1\b0 \cf0 [], 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 insertAfter(\cf10 Position\cf0 , \cf10 Position\cf0 );\uc0\u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 insertSorted(\cf10 List\cf0 , 
\f2\b \cf7 char
\f1\b0 \cf0 [
\f2\b \cf5 STUDENTNAMELENGTH
\f1\b0 \cf0 ], 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 \cf10 List \cf0 copyList(\cf10 List\cf0 );\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 initiateBuckets(\cf10 List\cf0 []);\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 emptyBuckets(\cf10 List\cf0 []);\uc0\u8232 \cf10 List \cf0 radixMerge(\cf10 List\cf0 []);\uc0\u8232 \cf10 List \cf0 radixSortedList(\cf10 List\cf0 , 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 printList(\cf10 List\cf0 );\uc0\u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 courseStudentsReport(\cf10 course_t\cf0 [], \cf10 FILE \cf0 *, 
\f2\b \cf7 int
\f1\b0 \cf0 );\uc0\u8232 \u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 main() \{\uc0\u8232 \u8232     \cf10 FILE \cf0 *coursesFile, *studentsFile, *reportFile;\uc0\u8232     coursesFile = fopen(
\f2\b \cf4 "/Users/AhmadSawi/Desktop/Data Structures/Project1/Courses.txt"
\f1\b0 \cf0 ,
\f2\b \cf4 "r"
\f1\b0 \cf0 );\uc0\u8232     studentsFile = fopen(
\f2\b \cf4 "/Users/AhmadSawi/Desktop/Data Structures/Project1/Students.txt"
\f1\b0 \cf0 , 
\f2\b \cf4 "r"
\f1\b0 \cf0 );\uc0\u8232     reportFile = fopen(
\f2\b \cf4 "/Users/AhmadSawi/Desktop/Data Structures/Project1/Reports.txt"
\f1\b0 \cf0 ,
\f2\b \cf4 "w"
\f1\b0 \cf0 );\uc0\u8232 \u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfCourses = fileLineCount(coursesFile), numberOfStudents = fileLineCount(studentsFile);\uc0\u8232 \u8232     \cf10 course_t \cf0 coursesArray[numberOfCourses];\uc0\u8232     fillCourseArrayFromFile(coursesArray, coursesFile, numberOfCourses);\u8232 \u8232     printCourses(coursesArray, numberOfCourses);\u8232 \u8232     \cf10 miniStudent \cf0 miniStudentList[numberOfStudents];\uc0\u8232     fillStudentsLinkedListFromFile(coursesArray, studentsFile, numberOfCourses, numberOfStudents, miniStudentList);\u8232 \u8232     printList(coursesArray[\cf6 0\cf0 ].\cf9 students\cf0 );\uc0\u8232 \u8232     
\f2\b \cf7 for 
\f1\b0 \cf0 (
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ; i < numberOfStudents ; ++i) \{\uc0\u8232         printf(
\f2\b \cf4 "\cf7 %d %s %d\cf4  |"
\f1\b0 \cf0 , miniStudentList[i].\cf9 id\cf0 , miniStudentList[i].\cf9 name\cf0 , miniStudentList[i].\cf9 numberOfCoursesRegistered\cf0 );\uc0\u8232         
\f2\b \cf7 for 
\f1\b0 \cf0 (
\f2\b \cf7 int 
\f1\b0 \cf0 j = \cf6 0\cf0 ; j < miniStudentList[i].\cf9 numberOfCoursesRegistered\cf0 ; ++j) \{\uc0\u8232             printf(
\f2\b \cf4 " \cf7 %d\cf4 "
\f1\b0 \cf0 , miniStudentList[i].\cf9 coursesIndexes\cf0 [j]);\uc0\u8232         \}\u8232         printf(
\f2\b \cf4 "\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232     \}\u8232 \u8232 
\f0\i \cf2 //    List substituteStudentList = (List) malloc(sizeof(student_t));\uc0\u8232 //    substituteStudentList->next = NULL;\u8232 //    substituteStudentList = radixSortedList(coursesArray[0].students, 7);\u8232 //    printList(substituteStudentList);\u8232 \u8232     
\f1\i0 \cf0 courseStudentsReport(coursesArray, reportFile, numberOfCourses);\uc0\u8232 \u8232 \u8232     
\f2\b \cf7 return 
\f1\b0 \cf6 0\cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 fileLineCount(\cf10 FILE \cf0 *file)\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 count = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 char 
\f1\b0 \cf0 ch;\uc0\u8232     
\f2\b \cf7 do
\f1\b0 \cf0 \{\uc0\u8232         ch = (
\f2\b \cf7 char
\f1\b0 \cf0 ) fgetc(file);\uc0\u8232         
\f2\b \cf7 if
\f1\b0 \cf0 (ch == 
\f2\b \cf4 '\cf7 \\n\cf4 '
\f1\b0 \cf0 )\uc0\u8232             count++;\u8232     \} 
\f2\b \cf7 while 
\f1\b0 \cf0 (!feof(file));\uc0\u8232     rewind(file);\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 count+\cf6 1\cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 getFromFile(\cf10 FILE \cf0 *file, 
\f2\b \cf7 char 
\f1\b0 \cf0 ret[][
\f2\b \cf5 SCANNEDSTRINGMAXLENGTH
\f1\b0 \cf0 ])\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 char 
\f1\b0 \cf0 buffer[
\f2\b \cf5 SCANNEDSTRINGMAXLENGTH
\f1\b0 \cf0 ];\uc0\u8232     
\f2\b \cf7 while 
\f1\b0 \cf0 (fgets(buffer, 
\f2\b \cf5 SCANNEDSTRINGMAXLENGTH
\f1\b0 \cf0 , file) != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\uc0\u8232         
\f2\b \cf5 strcpy
\f1\b0 \cf0 (ret[i++],buffer);\uc0\u8232     fclose(file);\u8232 \}\u8232 \u8232 
\f0\i \cf2 //void printStringArray(char s[][100], int size)\{\uc0\u8232 //    int j = 0;\u8232 //    for (j = 0; j < size; ++j) \{\u8232 //        printf("%s\\n",s[j]);\u8232 //    \}\u8232 //\}\u8232 \u8232 
\f2\i0\b \cf7 void 
\f1\b0 \cf0 printCourses(\cf10 course_t \cf0 coursesArray[], 
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfCourses)\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 l = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for 
\f1\b0 \cf0 (l = \cf6 0\cf0 ; l < numberOfCourses; ++l)\uc0\u8232         printf(
\f2\b \cf4 "\cf7 %s %s %d %.2f %.2f %d\\n\cf4 "
\f1\b0 \cf0 , coursesArray[l].\cf9 name\cf0 , coursesArray[l].\cf9 id\cf0 , coursesArray[l].\cf9 year\cf0 , coursesArray[l].\cf9 startTime\cf0 , coursesArray[l].\cf9 finishTime\cf0 , coursesArray[l].\cf9 maxStudents\cf0 );\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 makeDot(
\f2\b \cf7 char 
\f1\b0 \cf0 s[])\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for 
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < strlen(s); ++i) \{\uc0\u8232         
\f2\b \cf7 if
\f1\b0 \cf0 (s[i] == 
\f2\b \cf4 ':'
\f1\b0 \cf0 )\uc0\u8232             s[i] = 
\f2\b \cf4 '.'
\f1\b0 \cf0 ;\uc0\u8232     \}\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 fillCourseArrayFromFile(\cf10 course_t \cf0 coursesArray[], \cf10 FILE \cf0 *coursesFile, 
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfCourses)\{\uc0\u8232 \u8232     
\f2\b \cf7 char 
\f1\b0 \cf0 coursesStringsArray[numberOfCourses][
\f2\b \cf5 SCANNEDSTRINGMAXLENGTH
\f1\b0 \cf0 ];\uc0\u8232     getFromFile(coursesFile, coursesStringsArray);\u8232 \u8232     
\f2\b \cf7 char 
\f1\b0 \cf0 data[\cf6 6\cf0 ][
\f2\b \cf5 COURSENAMELENGTH
\f1\b0 \cf0 ];\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 q = \cf6 0\cf0 , j = \cf6 0\cf0 ;\uc0\u8232 \u8232     
\f2\b \cf7 for 
\f1\b0 \cf0 (j = \cf6 0\cf0 ; j < numberOfCourses; j++) \{\uc0\u8232 \u8232         
\f2\b \cf7 char 
\f1\b0 \cf0 *token;\uc0\u8232         token = strtok(coursesStringsArray[j], 
\f2\b \cf4 "#"
\f1\b0 \cf0 );\uc0\u8232         q = \cf6 0\cf0 ;\uc0\u8232         
\f2\b \cf7 while
\f1\b0 \cf0 (token != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232             
\f2\b \cf5 strcpy
\f1\b0 \cf0 (data[q++], token);\uc0\u8232             token = strtok(
\f2\b \cf5 NULL
\f1\b0 \cf0 , 
\f2\b \cf4 "#"
\f1\b0 \cf0 );\uc0\u8232         \}\u8232 \u8232         
\f2\b \cf5 strcpy
\f1\b0 \cf0 (coursesArray[j].\cf9 name\cf0 , data[\cf6 0\cf0 ]);\uc0\u8232         
\f2\b \cf5 strcpy
\f1\b0 \cf0 (coursesArray[j].\cf9 id\cf0 , data[\cf6 1\cf0 ]);\uc0\u8232         coursesArray[j].\cf9 year \cf0 = (
\f2\b \cf7 short
\f1\b0 \cf0 ) atoi(data[\cf6 2\cf0 ]);\uc0\u8232         makeDot(data[\cf6 3\cf0 ]);\uc0\u8232         coursesArray[j].\cf9 startTime \cf0 = atof(data[\cf6 3\cf0 ]);\uc0\u8232         makeDot(data[\cf6 4\cf0 ]);\uc0\u8232         coursesArray[j].\cf9 finishTime \cf0 = atof(data[\cf6 4\cf0 ]);\uc0\u8232         coursesArray[j].\cf9 maxStudents \cf0 = (
\f2\b \cf7 short
\f1\b0 \cf0 ) atoi(data[\cf6 5\cf0 ]);\uc0\u8232         coursesArray[j].\cf9 students \cf0 = (\cf10 List\cf0 ) malloc(
\f2\b \cf7 sizeof
\f1\b0 \cf0 (\cf10 student_t\cf0 ));\uc0\u8232         
\f2\b \cf7 if
\f1\b0 \cf0 (coursesArray[j].\cf9 students \cf0 == 
\f2\b \cf5 NULL
\f1\b0 \cf0 ) \{\uc0\u8232             printf(
\f2\b \cf4 "OUT OF RAM! malloc related error"
\f1\b0 \cf0 );\uc0\u8232             
\f2\b \cf7 return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232         \}\u8232        coursesArray[j].\cf9 students\cf0 ->\cf9 next \cf0 = 
\f2\b \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232     \}\u8232     
\f2\b \cf7 return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 removeSpace(
\f2\b \cf7 char 
\f1\b0 \cf0 s[])\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 , k = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < strlen(s); i++)\{\uc0\u8232         
\f2\b \cf7 if
\f1\b0 \cf0 (s[i] == 
\f2\b \cf4 ' '
\f1\b0 \cf0 )\{\uc0\u8232             
\f2\b \cf7 for
\f1\b0 \cf0 (k = i; k < strlen(s); k++)\{\uc0\u8232                 s[k] = s[k+\cf6 1\cf0 ];\uc0\u8232             \}\u8232             s[k-\cf6 1\cf0 ] = 
\f2\b \cf4 '\cf7 \\0\cf4 '
\f1\b0 \cf0 ;\uc0\u8232         \}\u8232     \}\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 removeNewLine(
\f2\b \cf7 char 
\f1\b0 \cf0 s[])\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 , k = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < strlen(s); i++)\{\uc0\u8232         
\f2\b \cf7 if
\f1\b0 \cf0 (s[i] == 
\f2\b \cf4 '\cf7 \\n\cf4 '
\f1\b0 \cf0 )\{\uc0\u8232             
\f2\b \cf7 for
\f1\b0 \cf0 (k = i; k < strlen(s); k++)\{\uc0\u8232                 s[k] = s[k+\cf6 1\cf0 ];\uc0\u8232             \}\u8232             s[k-\cf6 1\cf0 ] = 
\f2\b \cf4 '\cf7 \\0\cf4 '
\f1\b0 \cf0 ;\uc0\u8232         \}\u8232     \}\u8232 \}\u8232 \u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 findAddressOfCourse(
\f2\b \cf7 char 
\f1\b0 \cf0 crs[], \cf10 course_t \cf0 ocrss[], 
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfOfferedCourses)\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < numberOfOfferedCourses; i++)\{\uc0\u8232         
\f2\b \cf7 if
\f1\b0 \cf0 ( strcmp(ocrss[i].\cf9 id\cf0 , crs) == \cf6 0 \cf0 )\uc0\u8232             
\f2\b \cf7 return 
\f1\b0 \cf0 i;\uc0\u8232     \}\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 -\cf6 1\cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isCourseOffered(
\f2\b \cf7 char 
\f1\b0 \cf0 crs[], \cf10 course_t \cf0 ocrss[], 
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfOfferedCourses)\{\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (findAddressOfCourse(crs, ocrss, numberOfOfferedCourses) < \cf6 0\cf0 )\uc0\u8232     
\f2\b \cf7 return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232     
\f2\b \cf7 else\uc0\u8232         return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isAllowedToRegister(
\f2\b \cf7 int 
\f1\b0 \cf0 stNumber, 
\f2\b \cf7 int 
\f1\b0 \cf0 addressOfcrs, \cf10 course_t \cf0 ocrss[])\{\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (addressOfcrs < \cf6 0\cf0 )\uc0\u8232         
\f2\b \cf7 return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (stNumber <= ((ocrss[addressOfcrs].\cf9 year\cf0 )*\cf6 10000 \cf0 + \cf6 9999\cf0 ) )\uc0\u8232         
\f2\b \cf7 return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232 \u8232     
\f2\b \cf7 else\uc0\u8232         return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 studentsInCourse(\cf10 List \cf0 L)\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 counter = \cf6 0\cf0 ;\uc0\u8232     \cf10 Position \cf0 p = L;\uc0\u8232     
\f2\b \cf7 while
\f1\b0 \cf0 (p->\cf9 next \cf0 != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232         counter++;\u8232         p = p->\cf9 next\cf0 ;\uc0\u8232     \}\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 counter;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 int 
\f1\b0 \cf0 maxStudentsInCourse(
\f2\b \cf7 int 
\f1\b0 \cf0 index, \cf10 course_t \cf0 ocrss[])\{\uc0\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 (ocrss[index].\cf9 maxStudents\cf0 );\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 initiateClockArray(
\f2\b \cf5 bool 
\f1\b0 \cf0 clk[
\f2\b \cf5 CLOCKARRAYSIZE
\f1\b0 \cf0 ])\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < 
\f2\b \cf5 CLOCKARRAYSIZE
\f1\b0 \cf0 ; i++)\uc0\u8232         clk[i] = 
\f2\b \cf5 false
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f0\i \cf2 /*\uc0\u8232      * note: it has been assumed that there cant be a schedule with courses that have no breaks in between, like 11 - 12:30 & 12:30 - 2pm\u8232      * key: index | time of day\u8232      * 0 | 8 - 9\u8232      * 1 | 9 - 10\u8232      * 2 | 10 - 11\u8232      * 3 | 11 - 12\u8232      * 4 | 12 - 1pm\u8232      * 5 | 1pm - 2pm\u8232      * 6 | 2pm - 3pm\u8232      * 7 | 3pm - 4pm\u8232      * 8 | 4pm - 5pm\u8232      * -1 if wrong time or time where there should be no classes\u8232      * */\u8232 
\f2\i0\b \cf7 int 
\f1\b0 \cf0 getAddressForClock(
\f2\b \cf7 double 
\f1\b0 \cf0 time)\{\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (time >= \cf6 8.0 \cf0 && time < \cf6 9.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (time >= \cf6 9.0 \cf0 && time < \cf6 10.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 1\cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (time >= \cf6 10.0 \cf0 && time < \cf6 11.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 2\cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (time >= \cf6 11.0 \cf0 && time < \cf6 12.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 3\cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (time >= \cf6 12.0 \cf0 && time < \cf6 13.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 4\cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (time >= \cf6 13.0 \cf0 && time < \cf6 14.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 5\cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (time >= \cf6 14.0 \cf0 && time < \cf6 15.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 6\cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (time >= \cf6 15.0 \cf0 && time < \cf6 16.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 7\cf0 ;\uc0\u8232     
\f2\b \cf7 else if
\f1\b0 \cf0 (time >= \cf6 16.0 \cf0 && time < \cf6 17.0\cf0 )\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf6 8\cf0 ;\uc0\u8232     
\f2\b \cf7 else\uc0\u8232         return 
\f1\b0 \cf0 -\cf6 1\cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 fillClockArray(
\f2\b \cf5 bool 
\f1\b0 \cf0 clk[], 
\f2\b \cf7 double 
\f1\b0 \cf0 start, 
\f2\b \cf7 double 
\f1\b0 \cf0 finish)\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 stAddress = getAddressForClock(start), fnAddress = getAddressForClock(finish), i = \cf6 0\cf0 ;\uc0\u8232         
\f2\b \cf7 for
\f1\b0 \cf0 (i = stAddress; i <= fnAddress; i++)\{\uc0\u8232             clk[i] = 
\f2\b \cf5 true
\f1\b0 \cf0 ;\uc0\u8232         \}\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isNotConflict(
\f2\b \cf5 bool 
\f1\b0 \cf0 clk[
\f2\b \cf5 CLOCKARRAYSIZE
\f1\b0 \cf0 ], 
\f2\b \cf7 int 
\f1\b0 \cf0 addressOfcrs, \cf10 course_t \cf0 ocrss[])\{\uc0\u8232     
\f0\i \cf2 //return true;\uc0\u8232 \u8232     
\f2\i0\b \cf7 if
\f1\b0 \cf0 (addressOfcrs < \cf6 0\cf0 )\uc0\u8232         
\f2\b \cf7 return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232 \u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 double 
\f1\b0 \cf0 start = ocrss[addressOfcrs].\cf9 startTime\cf0 ;\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 stAddress = getAddressForClock(start);\uc0\u8232 \u8232     
\f2\b \cf7 double 
\f1\b0 \cf0 finish = ocrss[addressOfcrs].\cf9 finishTime\cf0 ;\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 fnAddress = getAddressForClock(finish);\uc0\u8232 \u8232         
\f2\b \cf7 for
\f1\b0 \cf0 (i = stAddress; i <= fnAddress; i++)\{\uc0\u8232             
\f2\b \cf7 if
\f1\b0 \cf0 (clk[i] == 
\f2\b \cf5 true
\f1\b0 \cf0 )\uc0\u8232                 
\f2\b \cf7 return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232 \u8232         \}\u8232 \u8232     fillClockArray(clk, start, finish);\u8232         
\f2\b \cf7 return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 fillStudentsLinkedListFromFile(\cf10 course_t \cf0 coursesArray[], \cf10 FILE \cf0 *studentsFile, 
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfCourses, 
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfStudents, \cf10 miniStudent \cf0 miniStudentList[])\{\uc0\u8232 \u8232     
\f2\b \cf7 char 
\f1\b0 \cf0 studentsStringArray[numberOfStudents][
\f2\b \cf5 SCANNEDSTRINGMAXLENGTH
\f1\b0 \cf0 ];\uc0\u8232     getFromFile(studentsFile, studentsStringArray);\u8232 \u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfCoursesRegistered = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 j = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf5 bool 
\f1\b0 \cf0 clocks[
\f2\b \cf5 CLOCKARRAYSIZE
\f1\b0 \cf0 ];\uc0\u8232     initiateClockArray(clocks);\u8232     
\f0\i \cf2 /*\uc0\u8232      * note: it has been assumed that there cant be a schedule of courses that have no breaks in between, like 11 - 12:30 & 12:30 - 2pm\u8232      * key: index | time of day\u8232      * 0 | 8 - 9\u8232      * 1 | 9 - 10\u8232      * 2 | 10 - 11\u8232      * 3 | 11 - 12\u8232      * 4 | 12 - 1pm\u8232      * 5 | 1pm - 2pm\u8232      * 6 | 2pm - 3pm\u8232      * 7 | 3pm - 4pm\u8232      * 8 | 4pm - 5pm\u8232      * */\u8232 \u8232     
\f2\i0\b \cf7 for
\f1\b0 \cf0 (j = \cf6 0\cf0 ; j < numberOfStudents; j++)\{\uc0\u8232         numberOfCoursesRegistered = \cf6 0\cf0 ;\uc0\u8232         
\f2\b \cf7 char 
\f1\b0 \cf0 *token2;\uc0\u8232         
\f2\b \cf7 char 
\f1\b0 \cf0 nameTemp[
\f2\b \cf5 STUDENTNAMELENGTH
\f1\b0 \cf0 ];\uc0\u8232         
\f2\b \cf7 int 
\f1\b0 \cf0 idTemp;\uc0\u8232 \u8232         miniStudentList[j].\cf9 numberOfCoursesRegistered \cf0 = \cf6 0\cf0 ;\uc0\u8232 \u8232         token2 = strtok(studentsStringArray[j], 
\f2\b \cf4 "#"
\f1\b0 \cf0 );\uc0\u8232         
\f2\b \cf5 strcpy
\f1\b0 \cf0 (nameTemp, token2);\uc0\u8232         
\f2\b \cf5 strcpy
\f1\b0 \cf0 (miniStudentList[j].\cf9 name\cf0 , nameTemp);\uc0\u8232         
\f0\i \cf2 //puts(nameTemp);\uc0\u8232 \u8232         
\f1\i0 \cf0 token2 = strtok(
\f2\b \cf5 NULL
\f1\b0 \cf0 , 
\f2\b \cf4 "#"
\f1\b0 \cf0 );\uc0\u8232         idTemp = atoi(token2);\u8232         miniStudentList[j].\cf9 id \cf0 = idTemp;\uc0\u8232 \u8232         token2 = strtok(
\f2\b \cf5 NULL
\f1\b0 \cf0 , 
\f2\b \cf4 "#"
\f1\b0 \cf0 );\uc0\u8232         
\f2\b \cf7 while
\f1\b0 \cf0 (token2 != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232             removeSpace(token2);\u8232             removeNewLine(token2);\u8232             
\f0\i \cf2 //puts(token2);\uc0\u8232             
\f2\i0\b \cf7 int 
\f1\b0 \cf0 indexOfAddress = findAddressOfCourse(token2,coursesArray, numberOfCourses);\uc0\u8232 \u8232             
\f2\b \cf7 if
\f1\b0 \cf0 (numberOfCoursesRegistered < \cf6 5 \cf0 && isCourseOffered(token2, coursesArray, numberOfCourses) && isAllowedToRegister(idTemp, indexOfAddress, coursesArray) && (studentsInCourse(coursesArray[j].\cf9 students\cf0 ) < maxStudentsInCourse(indexOfAddress, coursesArray)) && isNotConflict(clocks, indexOfAddress, coursesArray))\{\uc0\u8232                 insertSorted(coursesArray[indexOfAddress].\cf9 students\cf0 , nameTemp, idTemp);\uc0\u8232                 
\f0\i \cf2 //puts("*********");\uc0\u8232                 
\f1\i0 \cf0 miniStudentList[j].\cf9 coursesIndexes\cf0 [numberOfCoursesRegistered] = indexOfAddress;\uc0\u8232                 numberOfCoursesRegistered++;\u8232                 miniStudentList[j].\cf9 numberOfCoursesRegistered \cf0 = numberOfCoursesRegistered;\uc0\u8232                 
\f2\b \cf7 if
\f1\b0 \cf0 (numberOfCoursesRegistered == \cf6 5\cf0 )\uc0\u8232                     
\f2\b \cf7 break
\f1\b0 \cf0 ;\uc0\u8232             \}\u8232             token2 = strtok(
\f2\b \cf5 NULL
\f1\b0 \cf0 , 
\f2\b \cf4 "#"
\f1\b0 \cf0 );\uc0\u8232 \u8232         \}\u8232         initiateClockArray(clocks);\u8232 \u8232     \}\u8232 \}\u8232 \u8232 \cf10 List \cf0 NewHead()\{\uc0\u8232     \cf10 List \cf0 head = (\cf10 List\cf0 ) malloc(
\f2\b \cf7 sizeof
\f1\b0 \cf0 (\cf10 student_t\cf0 ));\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (head == 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232         printf(
\f2\b \cf4 "OUT OF RAM! malloc realted error.\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232         
\f2\b \cf7 return \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232     \}\u8232     head->\cf9 next \cf0 = 
\f2\b \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 head;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isEmpty(\cf10 List \cf0 L) \{\uc0\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 (L->\cf9 next \cf0 == 
\f2\b \cf5 NULL
\f1\b0 \cf0 );\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 isLast(\cf10 Position \cf0 p)\{\uc0\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 (p->\cf9 next \cf0 == 
\f2\b \cf5 NULL
\f1\b0 \cf0 );\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 deleteList(\cf10 List \cf0 L)\{\uc0\u8232     \cf10 Position \cf0 p, temp;\uc0\u8232     p = L->\cf9 next\cf0 ;\uc0\u8232     
\f2\b \cf7 while
\f1\b0 \cf0 (p != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232         temp = p->\cf9 next\cf0 ;\uc0\u8232         free(p);\u8232         p = temp;\u8232     \}\u8232     L->\cf9 next \cf0 = 
\f2\b \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 \cf10 Position \cf0 newNode(
\f2\b \cf7 char 
\f1\b0 \cf0 name[], 
\f2\b \cf7 int 
\f1\b0 \cf0 id)\{\uc0\u8232     \cf10 Position \cf0 new;\uc0\u8232     new = (\cf10 Position\cf0 ) malloc(
\f2\b \cf7 sizeof
\f1\b0 \cf0 (\cf10 student_t\cf0 ));\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (new == 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232         printf(
\f2\b \cf4 "OUT OF RAM! malloc realted error.\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232         
\f2\b \cf7 return \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232     \}\u8232     new->\cf9 id \cf0 = id;\uc0\u8232     
\f2\b \cf5 strcpy
\f1\b0 \cf0 (new->\cf9 name\cf0 , name);\uc0\u8232     new->\cf9 next \cf0 = 
\f2\b \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 new;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 insertFirst(\cf10 List \cf0 L, 
\f2\b \cf7 char 
\f1\b0 \cf0 name[
\f2\b \cf5 STUDENTNAMELENGTH
\f1\b0 \cf0 ], 
\f2\b \cf7 int 
\f1\b0 \cf0 id)\{\uc0\u8232     \cf10 Position \cf0 temp, p = L;\uc0\u8232     temp = (\cf10 student_t\cf0 *) malloc(
\f2\b \cf7 sizeof
\f1\b0 \cf0 (\cf10 student_t\cf0 ));\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (temp == 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232         printf(
\f2\b \cf4 "OUT OF RAM! malloc realted error.\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232         
\f2\b \cf7 return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232     \}\u8232     temp->\cf9 id \cf0 = id;\uc0\u8232     
\f2\b \cf5 strcpy
\f1\b0 \cf0 (temp->\cf9 name\cf0 , name);\uc0\u8232     temp->\cf9 next \cf0 = p->\cf9 next\cf0 ;\uc0\u8232     p->\cf9 next \cf0 = temp;\uc0\u8232     
\f2\b \cf7 return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 insertLast(\cf10 List \cf0 L, 
\f2\b \cf7 char 
\f1\b0 \cf0 name[], 
\f2\b \cf7 int 
\f1\b0 \cf0 id)\{\uc0\u8232     \cf10 Position \cf0 p = L, new = newNode(name, id);\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (new == 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\uc0\u8232         
\f2\b \cf7 return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232     
\f2\b \cf7 while
\f1\b0 \cf0 (!isLast(p))\uc0\u8232         p = p->\cf9 next\cf0 ;\uc0\u8232     p->\cf9 next \cf0 = new;\uc0\u8232     new->\cf9 next \cf0 = 
\f2\b \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232     
\f2\b \cf7 return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 insertAfter(\cf10 Position \cf0 p, \cf10 Position \cf0 toAdd)\{\uc0\u8232     toAdd->\cf9 next \cf0 = p->\cf9 next\cf0 ;\uc0\u8232     p->\cf9 next \cf0 = toAdd;\uc0\u8232     
\f2\b \cf7 return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf5 bool 
\f1\b0 \cf0 insertSorted(\cf10 List \cf0 L, 
\f2\b \cf7 char 
\f1\b0 \cf0 name[
\f2\b \cf5 STUDENTNAMELENGTH
\f1\b0 \cf0 ], 
\f2\b \cf7 int 
\f1\b0 \cf0 id)\{\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (isEmpty(L))\{\uc0\u8232         insertFirst(L, name, id);\u8232         
\f2\b \cf7 return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232     \}\u8232 \u8232     \cf10 Position \cf0 p = L, toAdd;\uc0\u8232     toAdd = (\cf10 Position\cf0 ) malloc(
\f2\b \cf7 sizeof
\f1\b0 \cf0 (\cf10 student_t\cf0 ));\uc0\u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (toAdd == 
\f2\b \cf5 NULL
\f1\b0 \cf0 ) \{\uc0\u8232         printf(
\f2\b \cf4 "OUT OF RAM! malloc related error.\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232         
\f2\b \cf7 return \cf5 false
\f1\b0 \cf0 ;\uc0\u8232     \}\u8232 \u8232     toAdd->\cf9 id \cf0 = id;\uc0\u8232     
\f2\b \cf5 strcpy
\f1\b0 \cf0 (toAdd->\cf9 name\cf0 , name);\uc0\u8232     
\f2\b \cf7 while
\f1\b0 \cf0 (p->\cf9 next \cf0 != 
\f2\b \cf5 NULL 
\f1\b0 \cf0 && ( strcmp(p->\cf9 next\cf0 ->\cf9 name\cf0 , name) < \cf6 0 \cf0 ))\uc0\u8232         p = p->\cf9 next\cf0 ;\uc0\u8232     insertAfter(p,toAdd);\u8232     
\f2\b \cf7 return \cf5 true
\f1\b0 \cf0 ;\uc0\u8232 \}\u8232 \u8232 \cf10 List \cf0 copyList(\cf10 List \cf0 L)\{\uc0\u8232     \cf10 List \cf0 newHead = NewHead();\uc0\u8232     \cf10 Position \cf0 p = L, temp = newHead, newNode;\uc0\u8232     
\f2\b \cf7 while
\f1\b0 \cf0 (p->\cf9 next \cf0 != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232         newNode = (\cf10 Position\cf0 ) malloc(
\f2\b \cf7 sizeof
\f1\b0 \cf0 (\cf10 student_t\cf0 ));\uc0\u8232         
\f2\b \cf7 if
\f1\b0 \cf0 (newNode == 
\f2\b \cf5 NULL
\f1\b0 \cf0 ) \{\uc0\u8232             printf(
\f2\b \cf4 "OUT OF RAM! malloc realted error.\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232             
\f2\b \cf7 return \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232         \}\u8232         newNode->\cf9 id \cf0 = p->\cf9 next\cf0 ->\cf9 id\cf0 ;\uc0\u8232         
\f2\b \cf5 strcpy
\f1\b0 \cf0 (newNode->\cf9 name\cf0 , p->\cf9 next\cf0 ->\cf9 name\cf0 );\uc0\u8232         temp->\cf9 next \cf0 = newNode;\uc0\u8232         p = p->\cf9 next\cf0 ;\uc0\u8232         temp = newNode;\u8232     \}\u8232     temp->\cf9 next \cf0 = 
\f2\b \cf5 NULL
\f1\b0 \cf0 ;\uc0\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 newHead;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 initiateBuckets(\cf10 List \cf0 buckets[])\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for 
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < \cf6 10\cf0 ; i++) \{\uc0\u8232         buckets[i] = NewHead();\u8232     \}\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 emptyBuckets(\cf10 List \cf0 buckets[])\{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < \cf6 10\cf0 ; i++)\{\uc0\u8232         deleteList(buckets[i]);\u8232     \}\u8232 \}\u8232 \u8232 \cf10 List \cf0 radixMerge(\cf10 List \cf0 buckets[])\{\uc0\u8232     \cf10 List \cf0 head = NewHead();\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 ;\uc0\u8232 \u8232     
\f2\b \cf7 for 
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < \cf6 10\cf0 ; i++) \{\uc0\u8232         \cf10 Position \cf0 p = buckets[i]->\cf9 next\cf0 ;\uc0\u8232 \u8232         
\f2\b \cf7 while
\f1\b0 \cf0 (p != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232             insertLast(head, p->\cf9 name\cf0 , p->\cf9 id\cf0 );\uc0\u8232             p = p->\cf9 next\cf0 ;\uc0\u8232         \}\u8232 \u8232     \}\u8232 \u8232     emptyBuckets(buckets);\u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 head;\uc0\u8232 \}\u8232 \u8232 \cf10 List \cf0 radixSortedList(\cf10 List \cf0 L, 
\f2\b \cf7 int 
\f1\b0 \cf0 maxLength)\{\uc0\u8232     \cf10 List \cf0 sorted = NewHead();\uc0\u8232 \u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (isEmpty(L))\{\uc0\u8232         
\f2\b \cf7 return 
\f1\b0 \cf0 sorted;\uc0\u8232     \}\u8232 \u8232     \cf10 Position \cf0 p = L->\cf9 next\cf0 ;\uc0\u8232 \u8232     
\f0\i \cf2 //printf("******\\n*********\\n*********\\n");\uc0\u8232 \u8232     
\f1\i0 \cf10 List \cf0 buckets[\cf6 10\cf0 ];\uc0\u8232     initiateBuckets(buckets);\u8232 \u8232 \u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 i = \cf6 0\cf0 , mod = \cf6 10\cf0 , div = \cf6 1\cf0 ;\uc0\u8232     
\f2\b \cf7 for
\f1\b0 \cf0 (i = \cf6 0\cf0 ; i < maxLength; i++)\{\uc0\u8232 \u8232         
\f2\b \cf7 while
\f1\b0 \cf0 (p != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232             
\f2\b \cf7 int 
\f1\b0 \cf0 number = (p->\cf9 id\cf0 )%mod;\uc0\u8232             number = (
\f2\b \cf7 int
\f1\b0 \cf0 ) number / div;\uc0\u8232             insertLast(buckets[number], p->\cf9 name\cf0 , p->\cf9 id\cf0 );\uc0\u8232             p = p->\cf9 next\cf0 ;\uc0\u8232         \}\u8232 \u8232 
\f0\i \cf2 //        for (int j = 0; j < 10; ++j) \{\uc0\u8232 //            printf("bucket %d: ",j);\u8232 //            printList(buckets[j]);\u8232 //        \}\u8232 //        printf("RunDOne\\n");\u8232 \u8232         
\f1\i0 \cf0 deleteList(sorted);\uc0\u8232         sorted = radixMerge(buckets);\u8232         p = sorted->\cf9 next\cf0 ;\uc0\u8232 \u8232         mod*=\cf6 10\cf0 ;\uc0\u8232         div*=\cf6 10\cf0 ;\uc0\u8232 \u8232     \}\u8232 \u8232     
\f2\b \cf7 return 
\f1\b0 \cf0 sorted;\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 printList(\cf10 List \cf0 L)\{\uc0\u8232 \u8232     
\f2\b \cf7 if
\f1\b0 \cf0 (isEmpty(L))\{\uc0\u8232         printf(
\f2\b \cf4 "List is empty!\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232         
\f2\b \cf7 return
\f1\b0 \cf0 ;\uc0\u8232     \}\u8232     \cf10 Position \cf0 p = L->\cf9 next\cf0 ;\uc0\u8232     printf(
\f2\b \cf4 "Head -> "
\f1\b0 \cf0 );\uc0\u8232     
\f2\b \cf7 while
\f1\b0 \cf0 (p != 
\f2\b \cf5 NULL
\f1\b0 \cf0 )\{\uc0\u8232         printf(
\f2\b \cf4 "id: \cf7 %d\cf4  Name: \cf7 %s\cf4 "
\f1\b0 \cf0 , p->\cf9 id\cf0 , p->\cf9 name\cf0 );\uc0\u8232         
\f2\b \cf7 if
\f1\b0 \cf0 (!isLast(p))\uc0\u8232             printf(
\f2\b \cf4 " -> "
\f1\b0 \cf0 );\uc0\u8232         p = p->\cf9 next\cf0 ;\uc0\u8232     \}\u8232     printf(
\f2\b \cf4 " -> NULL\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232 \}\u8232 \u8232 
\f2\b \cf7 void 
\f1\b0 \cf0 courseStudentsReport(\cf10 course_t \cf0 ocrss[], \cf10 FILE \cf0 *out, 
\f2\b \cf7 int 
\f1\b0 \cf0 numberOfCourses) \{\uc0\u8232     
\f2\b \cf7 int 
\f1\b0 \cf0 q = \cf6 0\cf0 ;\uc0\u8232     
\f2\b \cf7 for
\f1\b0 \cf0 (q = \cf6 0\cf0 ; q < numberOfCourses; q++) \{\uc0\u8232 \u8232         \cf10 List \cf0 substituteStudentList = radixSortedList(ocrss[q].\cf9 students\cf0 , \cf6 7\cf0 );\uc0\u8232         \cf10 Position \cf0 p = substituteStudentList->\cf9 next\cf0 ;\uc0\u8232 \u8232         fprintf(out, 
\f2\b \cf4 "Students table for \cf7 %s\cf4  course: \cf7 \\n\cf4 "
\f1\b0 \cf0 , ocrss[q].\cf9 name\cf0 );\uc0\u8232         fprintf(out, 
\f2\b \cf4 "-----------------------------------------------\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232 \u8232         
\f2\b \cf7 if 
\f1\b0 \cf0 (isEmpty(substituteStudentList)) \{\uc0\u8232             fprintf(out, 
\f2\b \cf4 "No Students Have Registered is This Course!\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232             fprintf(out, 
\f2\b \cf4 "-----------------------------------------------\cf7 \\n\\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232 \u8232         \} 
\f2\b \cf7 else 
\f1\b0 \cf0 \{\uc0\u8232             fprintf(out, 
\f2\b \cf4 "ID \cf7 \\t\\t\\t\cf4 |\cf7 \\t\cf4  Name\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232             fprintf(out, 
\f2\b \cf4 "-----------------------------------------------\cf7 \\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232 \u8232 \u8232             
\f2\b \cf7 while 
\f1\b0 \cf0 (p != 
\f2\b \cf5 NULL
\f1\b0 \cf0 ) \{\uc0\u8232                 fprintf(out, 
\f2\b \cf4 "\cf7 %d \\t\cf4 |\cf7 \\t %s\\n\cf4 "
\f1\b0 \cf0 , p->\cf9 id\cf0 , p->\cf9 name\cf0 );\uc0\u8232                 p = p->\cf9 next\cf0 ;\uc0\u8232             \}\u8232 \u8232             fprintf(out, 
\f2\b \cf4 "-----------------------------------------------\cf7 \\n\\n\cf4 "
\f1\b0 \cf0 );\uc0\u8232         \}\u8232     \}\u8232 \}\
}