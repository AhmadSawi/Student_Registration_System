{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
 * Summary:\
 *  this application works as a registration system for Birzeit Universiry Computer Science department. it takes two files one for the courses\
 *  that the department is offering and the other for the students and what they want to register. and it returns a report file that includes\
 *  registration info the head of the department requiers.\
 * */\
\
#include <stdio.h>\
#include <stdlib.h>\
#include <string.h>\
#include <stdbool.h>\
\
#define STUDENTNAMELENGTH 20\
#define COURSENAMELENGTH 50\
#define SCANNEDSTRINGMAXLENGTH 200\
#define IDSIZE 10\
#define CLOCKARRAYSIZE 9\
#define PATHLENGTH   50\
\
struct student\{\
    int id;\
    char name[STUDENTNAMELENGTH];\
    struct student* next;\
    int coursesIndexes[5];\
    int numberOfCoursesRegistered;\
\};\
\
typedef struct student student_t;\
typedef student_t *p2s;\
typedef p2s List;\
typedef p2s Position;\
\
\
struct course\{\
    char name[COURSENAMELENGTH], id[IDSIZE];\
    short maxStudents, year;\
    double startTime, finishTime;\
    List students;\
\};\
\
typedef struct course course_t;\
\
int fileLineCount(FILE*);\
void getFromFile(FILE*, char[][SCANNEDSTRINGMAXLENGTH]);\
//void printStringArray(char[][100], int); //for testing and evaluation while developing\
void printCourses(course_t[], int); //for testing\
void makeDot(char[]);\
bool fillCourseArrayFromFile(course_t[], FILE*, int);\
void removeSpace(char[]);\
void removeNewLine(char[]);\
bool isCourseOffered(char[], course_t[], int);\
int findAddressOfCourse(char[], course_t[], int);\
bool isAllowedToRegister(int, int, course_t[]);\
int studentsInCourse(List);\
int maxStudentsInCourse(int, course_t[]);\
void initiateClockArray(bool[]);\
int getAddressForClock(double);\
void fillClockArray(bool[], double, double);\
bool isNotConflict(bool[], int, course_t[]);\
void fillStudentsLinkedListFromFile(course_t[], FILE*,int, int, List);\
List NewHead();\
Position newNode(char[], int);\
bool isEmpty(List L);\
bool isLast(Position);\
void deleteList(List);\
bool insertFirst(List, char[], int);\
bool insertLast(List, char[], int);\
bool insertAfter(Position, Position);\
bool insertSorted(List, char[STUDENTNAMELENGTH], int);\
//List copyList(List);\
Position findStudent(List, int);\
void initiateBuckets(List[]);\
void emptyBuckets(List[]);\
List radixMerge(List[]);\
List radixSortedList(List, int);\
void sortCourses(course_t[], course_t[], int);\
void printList(List);\
void courseStudentsReport(course_t[], FILE *, int);\
void allStudentsReport(List , FILE*);\
void allCoursesReport(course_t[], FILE*, int);\
bool studentScheduleReport(FILE*, course_t[], List, int);\
\
int main() \{\
\
    FILE *coursesFile, *studentsFile, *reportFile;\
\
\
    char cfile[PATHLENGTH], sfile[PATHLENGTH], rfile[PATHLENGTH];\
\
    printf("Wellcome to the student registration gate!\\nPlease enter the complete path for the file that has the courses:");\
    scanf("%s", cfile);\
    printf("Great! now enter the path for the students file:");\
    scanf(" %s", sfile);\
    printf("And where do you want your output file to be?");\
    scanf("%s", rfile);\
\
    coursesFile = fopen(cfile,"r");\
    studentsFile = fopen(sfile, "r");\
    reportFile = fopen(rfile,"w");\
\
//    coursesFile = fopen("/Users/AhmadSawi/Desktop/Data Structures/Project1/Courses.txt","r");\
//    studentsFile = fopen("/Users/AhmadSawi/Desktop/Data Structures/Project1/Students.txt", "r");\
//    reportFile = fopen("/Users/AhmadSawi/Desktop/Data Structures/Project1/Reports.txt","w");\
\
    int numberOfCourses = fileLineCount(coursesFile);\
    int numberOfStudents = fileLineCount(studentsFile);\
\
    course_t coursesArray[numberOfCourses];\
    fillCourseArrayFromFile(coursesArray, coursesFile, numberOfCourses);\
\
\
    //miniStudent miniStudentList[numberOfStudents];\
    List miniStudentList = (List) malloc(sizeof(student_t));\
    miniStudentList->next = NULL;\
\
    fillStudentsLinkedListFromFile(coursesArray, studentsFile, numberOfCourses, numberOfStudents, miniStudentList);\
\
    printList(coursesArray[0].students);\
\
//    Position  p = miniStudentList->next;\
//  while(p != NULL)\{\
//        printf("%d %s %d |", p->id, p->name, p->numberOfCoursesRegistered);\
//        for (j = 0; j < p->numberOfCoursesRegistered; ++j) \{\
//            printf(" %d", p->coursesIndexes[j]);\
//        \}\
//        printf("\\n");\
//      p = p->next;\
//    \}\
\
\
//    List substituteStudentList = (List) malloc(sizeof(student_t));\
//    substituteStudentList->next = NULL;\
//    substituteStudentList = radixSortedList(coursesArray[0].students, 7);\
//    printList(substituteStudentList);\
\
    courseStudentsReport(coursesArray, reportFile, numberOfCourses);\
    allStudentsReport(miniStudentList, reportFile);\
//\
//    course_t sortedcourses[numberOfCourses];\
//    sortCourses(sortedcourses, coursesArray, numberOfCourses);\
//    printCourses(sortedcourses, numberOfCourses);\
\
    allCoursesReport(coursesArray, reportFile, numberOfCourses);\
\
    int stid;\
    printf("Enter the number of the student you want to have his scedule at the end of the Report file:\\n");//void printCourses(course_t coursesArray[], int numberOfCourses)\{\
//    int l = 0;\
//    for (l = 0; l < numberOfCourses; ++l)\
//        printf("%s %s %d %.2f %.2f %d\\n", coursesArray[l].name, coursesArray[l].id, coursesArray[l].year, coursesArray[l].startTime, coursesArray[l].finishTime, coursesArray[l].maxStudents);\
//\}\
\
    scanf("%d", &stid);\
    bool check = studentScheduleReport(reportFile, coursesArray, miniStudentList, stid);\
    while(!check)\{\
        scanf("%d", &stid);\
        check = studentScheduleReport(reportFile, coursesArray, miniStudentList, stid);\
    \}\
\
    printf("You're all done, go check the Reports.txt file for output");\
    return 0;\
\}\
\
int fileLineCount(FILE *file)\{\
    int count = 0;\
    char ch;\
    do\{\
        ch = (char) fgetc(file);\
        if(ch == '\\n')\
            count++;\
    \} while (!feof(file));\
    rewind(file);\
    return count+1;\
\}\
\
void getFromFile(FILE *file, char ret[][SCANNEDSTRINGMAXLENGTH])\{\
    int i = 0;\
    char buffer[SCANNEDSTRINGMAXLENGTH];\
    while (fgets(buffer, SCANNEDSTRINGMAXLENGTH, file) != NULL)\
        strcpy(ret[i++],buffer);\
    fclose(file);\
\}\
\
//void printStringArray(char s[][100], int size)\{\
//    int j = 0;\
//    for (j = 0; j < size; ++j) \{\
//        printf("%s\\n",s[j]);\
//    \}\
//\}\
\
\
void makeDot(char s[])\{\
    int i = 0;\
    for (i = 0; i < strlen(s); ++i) \{\
        if(s[i] == ':')\
            s[i] = '.';\
    \}\
\}\
\
\
\
bool fillCourseArrayFromFile(course_t coursesArray[], FILE *coursesFile, int numberOfCourses)\{\
\
    char coursesStringsArray[numberOfCourses][SCANNEDSTRINGMAXLENGTH];\
    getFromFile(coursesFile, coursesStringsArray);\
\
    char data[6][COURSENAMELENGTH];\
    int q = 0, j = 0;\
\
    for (j = 0; j < numberOfCourses; j++) \{\
\
        char *token;\
        token = strtok(coursesStringsArray[j], "#");\
        q = 0;\
        while(token != NULL)\{\
            strcpy(data[q++], token);\
            token = strtok(NULL, "#");\
        \}\
\
        strcpy(coursesArray[j].name, data[0]);\
        strcpy(coursesArray[j].id, data[1]);\
        coursesArray[j].year = (short) atoi(data[2]);\
        makeDot(data[3]);\
        coursesArray[j].startTime = atof(data[3]);\
        makeDot(data[4]);\
        coursesArray[j].finishTime = atof(data[4]);\
        coursesArray[j].maxStudents = (short) atoi(data[5]);\
        coursesArray[j].students = (List) malloc(sizeof(student_t));\
        if(coursesArray[j].students == NULL) \{\
            printf("OUT OF RAM! malloc related error");\
            return false;\
        \}\
       coursesArray[j].students->next = NULL;\
    \}\
    return true;\
\}\
\
void removeSpace(char s[])\{\
    int i = 0, k = 0;\
    for(i = 0; i < strlen(s); i++)\{\
        if(s[i] == ' ')\{\
            for(k = i; k < strlen(s); k++)\{\
                s[k] = s[k+1];\
            \}\
            s[k-1] = '\\0';\
        \}\
    \}\
\}\
\
void removeNewLine(char s[])\{\
    int i = 0, k = 0;\
    for(i = 0; i < strlen(s); i++)\{\
        if(s[i] == '\\n')\{\
            for(k = i; k < strlen(s); k++)\{\
                s[k] = s[k+1];\
            \}\
            s[k-1] = '\\0';\
        \}\
    \}\
\}\
\
int findAddressOfCourse(char crs[], course_t ocrss[], int numberOfOfferedCourses)\{\
    int i = 0;\
    for(i = 0; i < numberOfOfferedCourses; i++)\{\
        if( strcmp(ocrss[i].id, crs) == 0 )\
            return i;\
    \}\
    return -1;\
\}\
\
bool isCourseOffered(char crs[], course_t ocrss[], int numberOfOfferedCourses)\{\
    if(findAddressOfCourse(crs, ocrss, numberOfOfferedCourses) < 0)\
    return false;\
    else\
        return true;\
\}\
\
bool isAllowedToRegister(int stNumber, int addressOfcrs, course_t ocrss[])\{\
    if(addressOfcrs < 0)\
        return false;\
    else if(stNumber <= ((ocrss[addressOfcrs].year)*10000 + 9999) )\
        return true;\
\
    else\
        return false;\
\}\
\
int studentsInCourse(List L)\{\
    int counter = 0;\
    Position p = L;\
    while(p->next != NULL)\{\
        counter++;\
        p = p->next;\
    \}\
    return counter;\
\}\
\
int maxStudentsInCourse(int index, course_t ocrss[])\{\
    return (ocrss[index].maxStudents);\
\}\
\
void initiateClockArray(bool clk[CLOCKARRAYSIZE])\{\
    int i = 0;\
    for(i = 0; i < CLOCKARRAYSIZE; i++)\
        clk[i] = false;\
\}\
\
/*\
     * note: it has been assumed that there cant be a schedule with courses that have no breaks in between, like 11 - 12:30 & 12:30 - 2pm\
     * key: index | time of day\
     * 0 | 8 - 9\
     * 1 | 9 - 10\
     * 2 | 10 - 11\
     * 3 | 11 - 12\
     * 4 | 12 - 1pm\
     * 5 | 1pm - 2pm\
     * 6 | 2pm - 3pm\
     * 7 | 3pm - 4pm\
     * 8 | 4pm - 5pm\
     * -1 if wrong time or time where there should be no classes\
     * */\
int getAddressForClock(double time)\{\
    if(time >= 8.0 && time < 9.0)\
        return 0;\
    else if(time >= 9.0 && time < 10.0)\
        return 1;\
    else if(time >= 10.0 && time < 11.0)\
        return 2;\
    else if(time >= 11.0 && time < 12.0)\
        return 3;\
    else if(time >= 12.0 && time < 13.0)\
        return 4;\
    else if(time >= 13.0 && time < 14.0)\
        return 5;\
    else if(time >= 14.0 && time < 15.0)\
        return 6;\
    else if(time >= 15.0 && time < 16.0)\
        return 7;\
    else if(time >= 16.0 && time < 17.0)\
        return 8;\
    else\
        return -1;\
\}\
\
void fillClockArray(bool clk[], double start, double finish)\{\
    int stAddress = getAddressForClock(start), fnAddress = getAddressForClock(finish), i = 0;\
        for(i = stAddress; i <= fnAddress; i++)\{\
            clk[i] = true;\
        \}\
\}\
\
bool isNotConflict(bool clk[CLOCKARRAYSIZE], int addressOfcrs, course_t ocrss[])\{\
    //return true;\
\
    if(addressOfcrs < 0)\
        return false;\
\
    int i = 0;\
    double start = ocrss[addressOfcrs].startTime;\
    int stAddress = getAddressForClock(start);\
\
    double finish = ocrss[addressOfcrs].finishTime;\
    int fnAddress = getAddressForClock(finish);\
\
        for(i = stAddress; i <= fnAddress; i++)\{\
            if(clk[i] == true)\
                return false;\
\
        \}\
\
    fillClockArray(clk, start, finish);\
        return true;\
\}\
\
void fillStudentsLinkedListFromFile(course_t coursesArray[], FILE *studentsFile, int numberOfCourses, int numberOfStudents, List miniStudentList)\{\
\
    char studentsStringArray[numberOfStudents][SCANNEDSTRINGMAXLENGTH];\
    getFromFile(studentsFile, studentsStringArray);\
\
    int numberOfCoursesRegistered = 0;\
    int j = 0;\
    bool clocks[CLOCKARRAYSIZE];\
    initiateClockArray(clocks);\
    /*\
     * note: it has been assumed that there cant be a schedule of courses that have no breaks in between, like 11 - 12:30 & 12:30 - 2pm\
     * key: index | time of day\
     * 0 | 8 - 9\
     * 1 | 9 - 10\
     * 2 | 10 - 11\
     * 3 | 11 - 12\
     * 4 | 12 - 1pm\
     * 5 | 1pm - 2pm\
     * 6 | 2pm - 3pm\
     * 7 | 3pm - 4pm\
     * 8 | 4pm - 5pm\
     * */\
\
    Position p = miniStudentList;\
\
    for(j = 0; j < numberOfStudents; j++)\{\
        numberOfCoursesRegistered = 0;\
        char *token2;\
        char nameTemp[STUDENTNAMELENGTH];\
        int idTemp;\
\
        //miniStudentList[j].numberOfCoursesRegistered = 0;\
\
\
        token2 = strtok(studentsStringArray[j], "#");\
        strcpy(nameTemp, token2);\
        //strcpy(miniStudentList[j].name, nameTemp);\
\
        //puts(nameTemp);\
\
        token2 = strtok(NULL, "#");\
        idTemp = atoi(token2);\
        //miniStudentList[j].id = idTemp;\
\
        insertLast(miniStudentList, nameTemp, idTemp);\
        Position t = p->next;\
        t->numberOfCoursesRegistered = 0;\
\
        token2 = strtok(NULL, "#");\
        while(token2 != NULL)\{\
            removeSpace(token2);\
            removeNewLine(token2);\
            //puts(token2);\
            int indexOfAddress = findAddressOfCourse(token2,coursesArray, numberOfCourses);\
\
            if(numberOfCoursesRegistered < 5 && isCourseOffered(token2, coursesArray, numberOfCourses) && isAllowedToRegister(idTemp, indexOfAddress, coursesArray) && (studentsInCourse(coursesArray[j].students) < maxStudentsInCourse(indexOfAddress, coursesArray)) && isNotConflict(clocks, indexOfAddress, coursesArray))\{\
                insertSorted(coursesArray[indexOfAddress].students, nameTemp, idTemp);\
                //puts("*********");\
                //miniStudentList[j].coursesIndexes[numberOfCoursesRegistered] = indexOfAddress;\
                t->coursesIndexes[numberOfCoursesRegistered] = indexOfAddress;\
\
                numberOfCoursesRegistered++;\
                //miniStudentList[j].numberOfCoursesRegistered = numberOfCoursesRegistered;\
                t->numberOfCoursesRegistered = numberOfCoursesRegistered;\
\
                if(numberOfCoursesRegistered == 5)\
                    break;\
            \}\
            token2 = strtok(NULL, "#");\
\
        \}\
        initiateClockArray(clocks);\
        p = p->next;\
    \}\
\}\
\
List NewHead()\{\
    List head = (List) malloc(sizeof(student_t));\
    if(head == NULL)\{\
        printf("OUT OF RAM! malloc realted error.\\n");\
        return NULL;\
    \}\
    head->next = NULL;\
    return head;\
\}\
\
bool isEmpty(List L) \{\
    return (L->next == NULL);\
\}\
\
bool isLast(Position p)\{\
    return (p->next == NULL);\
\}\
\
void deleteList(List L)\{\
    Position p, temp;\
    p = L->next;\
    while(p != NULL)\{\
        temp = p->next;\
        free(p);\
        p = temp;\
    \}\
    L->next = NULL;\
\}\
\
Position newNode(char name[], int id)\{\
    Position new;\
    new = (Position) malloc(sizeof(student_t));\
    if(new == NULL)\{\
        printf("OUT OF RAM! malloc realted error.\\n");\
        return NULL;\
    \}\
    new->id = id;\
    strcpy(new->name, name);\
    new->next = NULL;\
    return new;\
\}\
\
bool insertFirst(List L, char name[STUDENTNAMELENGTH], int id)\{\
    Position temp, p = L;\
    temp = (student_t*) malloc(sizeof(student_t));\
    if(temp == NULL)\{\
        printf("OUT OF RAM! malloc realted error.\\n");\
        return false;\
    \}\
    temp->id = id;\
    strcpy(temp->name, name);\
    temp->next = p->next;\
    p->next = temp;\
    return true;\
\}\
\
bool insertLast(List L, char name[], int id)\{\
    Position p = L, new = newNode(name, id);\
    if(new == NULL)\
        return false;\
    while(!isLast(p))\
        p = p->next;\
    p->next = new;\
    new->next = NULL;\
    return true;\
\}\
\
bool insertAfter(Position p, Position toAdd)\{\
    toAdd->next = p->next;\
    p->next = toAdd;\
    return true;\
\}\
\
bool insertSorted(List L, char name[STUDENTNAMELENGTH], int id)\{\
    if(isEmpty(L))\{\
        insertFirst(L, name, id);\
        return true;\
    \}\
\
    Position p = L, toAdd;\
    toAdd = (Position) malloc(sizeof(student_t));\
    if(toAdd == NULL) \{\
        printf("OUT OF RAM! malloc related error.\\n");\
        return false;\
    \}\
\
    toAdd->id = id;\
    strcpy(toAdd->name, name);\
    while(p->next != NULL && ( strcmp(p->next->name, name) < 0 ))\
        p = p->next;\
    insertAfter(p,toAdd);\
    return true;\
\}\
\
//List copyList(List L)\{\
//    List newHead = NewHead();\
//    Position p = L, temp = newHead, newNode;\
//    while(p->next != NULL)\{\
//        newNode = (Position) malloc(sizeof(student_t));\
//        if(newNode == NULL) \{\
//            printf("OUT OF RAM! malloc realted error.\\n");\
//            return NULL;\
//        \}\
//        newNode->id = p->next->id;\
//        strcpy(newNode->name, p->next->name);\
//        temp->next = newNode;\
//        p = p->next;\
//        temp = newNode;\
//    \}\
//    temp->next = NULL;\
//    return newHead;\
//\}\
\
Position findStudent(List L, int id)\{\
    Position p = L->next;\
    while(p != NULL && p->id != id)\{\
        p = p->next;\
    \}\
    return p;\
\}\
\
void initiateBuckets(List buckets[])\{\
    int i = 0;\
    for (i = 0; i < 10; i++) \{\
        buckets[i] = NewHead();\
    \}\
\}\
\
void emptyBuckets(List buckets[])\{\
    int i = 0;\
    for(i = 0; i < 10; i++)\{\
        deleteList(buckets[i]);\
    \}\
\}\
\
List radixMerge(List buckets[])\{\
    List head = NewHead();\
    int i = 0;\
\
    for (i = 0; i < 10; i++) \{\
        Position p = buckets[i]->next;\
\
        while(p != NULL)\{\
            insertLast(head, p->name, p->id);\
            p = p->next;\
        \}\
\
    \}\
\
    emptyBuckets(buckets);\
    return head;\
\}\
\
List radixSortedList(List L, int maxLength)\{\
    List sorted = NewHead();\
\
    if(isEmpty(L))\{\
        return sorted;\
    \}\
\
    Position p = L->next;\
\
    //printf("******\\n*********\\n*********\\n");\
\
    List buckets[10];\
    initiateBuckets(buckets);\
\
\
    int i = 0, mod = 10, div = 1;\
    for(i = 0; i < maxLength; i++)\{\
\
        while(p != NULL)\{\
            int number = (p->id)%mod;\
            number = number / div;\
            insertLast(buckets[number], p->name, p->id);\
            p = p->next;\
        \}\
\
//        for (int j = 0; j < 10; ++j) \{\
//            printf("bucket %d: ",j);\
//            printList(buckets[j]);\
//        \}\
//        printf("RunDOne\\n");\
\
        deleteList(sorted);\
        sorted = radixMerge(buckets);\
        p = sorted->next;\
\
        mod*=10;\
        div*=10;\
\
    \}\
\
    return sorted;\
\}\
\
void sortCourses(course_t sorted[], course_t ocrss[], int numberOfCourses)\{\
    int i = 0, j = 0, q = 0;\
    course_t temp;\
    for (i = 0; i < numberOfCourses; i++)\{\
        sorted[i] = ocrss[i];\
    \}\
\
    for (j = 0; j < numberOfCourses-1; j++)\{\
        for (q = j; q < numberOfCourses; q++)\{\
            if(sorted[j].year > sorted[q].year)\{\
                temp = sorted[q];\
                sorted[q] = sorted[j];\
                sorted[j] = temp;\
            \}\
        \}\
    \}\
\
\}\
\
void printList(List L)\{\
\
    if(isEmpty(L))\{\
        printf("List is empty!\\n");\
        return;\
    \}\
    Position p = L->next;\
    printf("Head -> ");\
    while(p != NULL)\{\
        printf("id: %d Name: %s", p->id, p->name);\
        if(!isLast(p))\
            printf(" -> ");\
        p = p->next;\
    \}\
    printf(" -> NULL\\n");\
\}\
\
void courseStudentsReport(course_t ocrss[], FILE *out, int numberOfCourses) \{\
    int q = 0;\
    for(q = 0; q < numberOfCourses; q++) \{\
\
        List substituteStudentList = radixSortedList(ocrss[q].students, 7);\
        Position p = substituteStudentList->next;\
\
        fprintf(out, "STUDENTS TABLE FOR %s COURSE: \\n", ocrss[q].name);\
        fprintf(out, "------------------------------------------------------\\n");\
\
        if (isEmpty(substituteStudentList)) \{\
            fprintf(out, "No Students Have Registered is This Course!\\n");\
            fprintf(out, "-----------------------------------------------------\\n\\n");\
\
        \} else \{\
            fprintf(out, "ID \\t|\\t Name\\n");\
            fprintf(out, "------------------------------------------------------\\n");\
\
\
            while (p != NULL) \{\
                fprintf(out, "%d |\\t %s\\n", p->id, p->name);\
                p = p->next;\
            \}\
\
            fprintf(out, "------------------------------------------------------\\n\\n");\
        \}\
    \}\
\}\
\
void allStudentsReport(List L, FILE *out)\{\
    List substituteStudentList = radixSortedList(L, 7);\
    Position p = substituteStudentList->next;\
\
    fprintf(out, "ALL STUDENTS IN ALL COURSES\\n");\
    fprintf(out, "---------------------------------\\n");\
\
    if (isEmpty(substituteStudentList)) \{\
        fprintf(out, "No Students Have Registered This semester!\\n");\
        fprintf(out, "--------------------------------\\n\\n");\
    \} else \{\
       fprintf(out, "ID \\t|\\t Name\\n");\
        fprintf(out, "---------------------------------\\n");\
        while (p != NULL)\{\
           fprintf(out, "%d |\\t%s\\n", p->id, p->name);\
           p = p->next;\
       \}\
        fprintf(out, "---------------------------------\\n\\n");\
    \}\
\}\
\
void allCoursesReport(course_t courses[], FILE *out, int numberOfCourses)\{\
\
    course_t sorted[numberOfCourses];\
    sortCourses(sorted, courses, numberOfCourses);\
\
    fprintf(out, "ALL COURSES\\n");\
    fprintf(out, "------------------------------------------------------------------\\n");\
    fprintf(out, "ID \\t    | Name\\t\\t\\t   |\\t Students Enrolled\\n");\
    fprintf(out, "------------------------------------------------------------------\\n");\
    int  i = 0;\
    for (i = 0; i < numberOfCourses; i++)\{\
        fprintf(out, "%s     | %-28s |\\t %d\\n", sorted[i].id, sorted[i].name, studentsInCourse(sorted[i].students));\
    \}\
    fprintf(out, "------------------------------------------------------------------\\n\\n");\
\}\
\
bool studentScheduleReport(FILE *out, course_t ocrss[], List L, int id)\{\
    Position p = findStudent(L, id);\
    int i = 0;\
\
    if(p == NULL)\{\
        printf("Student Not Enrolled into the system! re-check the number and try again:\\n");\
        return false;\
    \}\
\
    fprintf(out, "Schedule For: %s\\n", p->name);\
    fprintf(out, "------------------------------------------------------------------------------\\n");\
    fprintf(out, "Hour:| 8     | 9     | 10    | 11    | 12    | 1pm   | 2pm   | 3pm   | 4pm   |\\n");\
    fprintf(out, "------------------------------------------------------------------------------\\n");\
    bool times[9];\
    initiateClockArray(times);\
    int courseIndex[9];\
\
\
    for (i = 0; i < p->numberOfCoursesRegistered; i++)\{\
        int index = p->coursesIndexes[i];\
        fillClockArray(times, ocrss[index].startTime, ocrss[index].finishTime);\
        int where = getAddressForClock(ocrss[index].startTime);\
        courseIndex[where] = index;\
    \}\
\
    fprintf(out, "     |");\
\
    for (i = 0; i < 9; i++)\{\
        if(times[i])\{\
            fprintf(out, "%s|", ocrss[courseIndex[i]].id);\
        \}else\{\
            fprintf(out, "       |");\
        \}\
    \}\
\
    //fprintf(out, "       |\\n");\
    fprintf(out, "\\n------------------------------------------------------------------------------\\n");\
    return true;\
\}\
}